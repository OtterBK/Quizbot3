{"version":3,"file":"index.js","sourceRoot":"","sources":["../play-dl/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    playlist_info,\n    video_basic_info,\n    video_info,\n    decipher_info,\n    yt_validate,\n    extractID,\n    YouTube,\n    YouTubeStream,\n    YouTubeChannel,\n    YouTubePlayList,\n    YouTubeVideo,\n    InfoData,\n    SeekStream\n} from './YouTube';\nimport {\n    spotify,\n    sp_validate,\n    refreshToken,\n    is_expired,\n    SpotifyAlbum,\n    SpotifyPlaylist,\n    SpotifyTrack,\n    Spotify,\n    SpotifyAuthorize,\n    sp_search\n} from './Spotify';\nimport {\n    soundcloud,\n    so_validate,\n    SoundCloud,\n    SoundCloudStream,\n    getFreeClientID,\n    SoundCloudPlaylist,\n    SoundCloudTrack,\n    check_id,\n    so_search,\n    stream as so_stream,\n    stream_from_info as so_stream_info\n} from './SoundCloud';\nimport {\n    deezer,\n    dz_validate,\n    dz_advanced_track_search,\n    Deezer,\n    DeezerTrack,\n    DeezerPlaylist,\n    DeezerAlbum,\n    dz_search\n} from './Deezer';\nimport { setToken } from './token';\n\nenum AudioPlayerStatus {\n    Idle = 'idle',\n    Buffering = 'buffering',\n    Paused = 'paused',\n    Playing = 'playing',\n    AutoPaused = 'autopaused'\n}\n\ninterface SearchOptions {\n    limit?: number;\n    source?: {\n        youtube?: 'video' | 'playlist' | 'channel';\n        spotify?: 'album' | 'playlist' | 'track';\n        soundcloud?: 'tracks' | 'playlists' | 'albums';\n        deezer?: 'track' | 'playlist' | 'album';\n    };\n    fuzzy?: boolean;\n    language?: string;\n    /**\n     * !!! Before enabling this for public servers, please consider using Discord features like NSFW channels as not everyone in your server wants to see NSFW images. !!!\n     * Unblurred images will likely have different dimensions than specified in the {@link YouTubeThumbnail} objects.\n     */\n    unblurNSFWThumbnails?: boolean;\n}\n\nimport { createInterface } from 'node:readline';\nimport { existsSync, mkdirSync, writeFileSync } from 'node:fs';\nimport { stream as yt_stream, StreamOptions, stream_from_info as yt_stream_info } from './YouTube/stream';\nimport { yt_search } from './YouTube/search';\nimport { EventEmitter } from 'stream';\n\nasync function stream(url: string, options: { seek?: number } & StreamOptions): Promise<YouTubeStream>;\nasync function stream(url: string, options?: StreamOptions): Promise<YouTubeStream | SoundCloudStream>;\n/**\n * Creates a Stream [ YouTube or SoundCloud ] class from a url for playing.\n *\n * Example\n * ```ts\n * const source = await play.stream('youtube video URL') // YouTube Video Stream\n *\n * const source = await play.stream('soundcloud track URL') // SoundCloud Track Stream\n *\n * const source = await play.stream('youtube video URL', { seek : 45 }) // Seeks 45 seconds (approx.) in YouTube Video Stream\n *\n * const resource = createAudioResource(source.stream, {\n *      inputType : source.type\n * }) // Use discordjs voice createAudioResource function.\n * ```\n * @param url Video / Track URL\n * @param options\n *\n *  - `number` seek : No of seconds to seek in stream.\n *  - `string` language : Sets language of searched content [ YouTube search only. ], e.g. \"en-US\"\n *  - `number` quality : Quality number. [ 0 = Lowest, 1 = Medium, 2 = Highest ]\n *  - `boolean` htmldata : given data is html data or not\n *  - `number` precache : No of segments of data to store before looping [YouTube Live Stream only]. [ Defaults to 3 ]\n *  - `boolean` discordPlayerCompatibility : Conversion of Webm to Opus [ Defaults to false ]\n * @returns A {@link YouTubeStream} or {@link SoundCloudStream} Stream to play\n */\nasync function stream(url: string, options: StreamOptions = {}): Promise<YouTubeStream | SoundCloudStream> {\n    const url_ = url.trim();\n    if (url_.length === 0) throw new Error('Stream URL has a length of 0. Check your url again.');\n    if (options.htmldata) return await yt_stream(url_, options);\n    if (url_.indexOf('spotify') !== -1) {\n        throw new Error(\n            'Streaming from Spotify is not supported. Please use search() to find a similar track on YouTube or SoundCloud instead.'\n        );\n    }\n    if (url_.indexOf('deezer') !== -1) {\n        throw new Error(\n            'Streaming from Deezer is not supported. Please use search() to find a similar track on YouTube or SoundCloud instead.'\n        );\n    }\n    if (url_.indexOf('soundcloud') !== -1) return await so_stream(url_, options.quality);\n    else return await yt_stream(url_, options);\n}\n\nasync function search(query: string, options: { source: { deezer: 'album' } } & SearchOptions): Promise<DeezerAlbum[]>;\nasync function search(\n    query: string,\n    options: { source: { deezer: 'playlist' } } & SearchOptions\n): Promise<DeezerPlaylist[]>;\nasync function search(query: string, options: { source: { deezer: 'track' } } & SearchOptions): Promise<DeezerTrack[]>;\nasync function search(\n    query: string,\n    options: { source: { soundcloud: 'albums' } } & SearchOptions\n): Promise<SoundCloudPlaylist[]>;\nasync function search(\n    query: string,\n    options: { source: { soundcloud: 'playlists' } } & SearchOptions\n): Promise<SoundCloudPlaylist[]>;\nasync function search(\n    query: string,\n    options: { source: { soundcloud: 'tracks' } } & SearchOptions\n): Promise<SoundCloudTrack[]>;\nasync function search(\n    query: string,\n    options: { source: { spotify: 'album' } } & SearchOptions\n): Promise<SpotifyAlbum[]>;\nasync function search(\n    query: string,\n    options: { source: { spotify: 'playlist' } } & SearchOptions\n): Promise<SpotifyPlaylist[]>;\nasync function search(\n    query: string,\n    options: { source: { spotify: 'track' } } & SearchOptions\n): Promise<SpotifyTrack[]>;\nasync function search(\n    query: string,\n    options: { source: { youtube: 'channel' } } & SearchOptions\n): Promise<YouTubeChannel[]>;\nasync function search(\n    query: string,\n    options: { source: { youtube: 'playlist' } } & SearchOptions\n): Promise<YouTubePlayList[]>;\nasync function search(\n    query: string,\n    options: { source: { youtube: 'video' } } & SearchOptions\n): Promise<YouTubeVideo[]>;\nasync function search(query: string, options: { limit: number } & SearchOptions): Promise<YouTubeVideo[]>;\nasync function search(query: string, options?: SearchOptions): Promise<YouTubeVideo[]>;\n/**\n * Searches through a particular source and gives respective info.\n * \n * Example\n * ```ts\n * const searched = await play.search('Rick Roll', { source : { youtube : \"video\" } }) // YouTube Video Search\n * \n * const searched = await play.search('Rick Roll', { limit : 1 }) // YouTube Video Search but returns only 1 video.\n * \n * const searched = await play.search('Rick Roll', { source : { spotify : \"track\" } }) // Spotify Track Search\n * \n * const searched = await play.search('Rick Roll', { source : { soundcloud : \"tracks\" } }) // SoundCloud Track Search\n * \n * const searched = await play.search('Rick Roll', { source : { deezer : \"track\" } }) // Deezer Track Search\n * ```\n * @param query string to search.\n * @param options\n * \n *  - `number` limit : No of searches you want to have.\n *  - `string` language : Sets language of searched content [ YouTube search only. ], e.g. \"en-US\"\n *  - `boolean` unblurNSFWThumbnails : Unblurs NSFW thumbnails. Defaults to `false` [ YouTube search only. ]\n *              !!! Before enabling this for public servers, please consider using Discord features like NSFW channels as not everyone in your server wants to see NSFW images. !!!\n *              Unblurred images will likely have different dimensions than specified in the {@link YouTubeThumbnail} objects.\n *  - `boolean` fuzzy : Whether the search should be fuzzy or only return exact matches. Defaults to `true`. [ for `Deezer` Only ]\n *  - `Object` source : Contains type of source and type of result you want to have\n * ```ts\n *      - youtube : 'video' | 'playlist' | 'channel';\n        - spotify : 'album' | 'playlist' | 'track';\n        - soundcloud : 'tracks' | 'playlists' | 'albums';\n        - deezer : 'track' | 'playlist' | 'album';\n    ```\n * @returns Array of {@link YouTube} or {@link Spotify} or {@link SoundCloud} or {@link Deezer} type\n */\nasync function search(\n    query: string,\n    options: SearchOptions = {}\n): Promise<YouTube[] | Spotify[] | SoundCloud[] | Deezer[]> {\n    if (!options.source) options.source = { youtube: 'video' };\n    const query_ = encodeURIComponent(query.trim());\n    if (options.source.youtube)\n        return await yt_search(query_, {\n            limit: options.limit,\n            type: options.source.youtube,\n            language: options.language,\n            unblurNSFWThumbnails: options.unblurNSFWThumbnails\n        });\n    else if (options.source.spotify) return await sp_search(query_, options.source.spotify, options.limit);\n    else if (options.source.soundcloud) return await so_search(query_, options.source.soundcloud, options.limit);\n    else if (options.source.deezer)\n        return await dz_search(query_, { limit: options.limit, type: options.source.deezer, fuzzy: options.fuzzy });\n    else throw new Error('Not possible to reach Here LOL. Easter Egg of play-dl if someone get this.');\n}\n\nasync function stream_from_info(info: SoundCloudTrack, options?: StreamOptions): Promise<SoundCloudStream>;\nasync function stream_from_info(info: InfoData, options?: StreamOptions): Promise<YouTubeStream>;\n/**\n * Creates a Stream [ YouTube or SoundCloud ] class from video or track info for playing.\n *\n * Example\n * ```ts\n * const info = await video_info('youtube URL')\n * const source = await play.stream_from_info(info) // YouTube Video Stream\n *\n * const soundInfo = await play.soundcloud('SoundCloud URL')\n * const source = await play.stream_from_info(soundInfo) // SoundCloud Track Stream\n *\n * const source = await play.stream_from_info(info, { seek : 45 }) // Seeks 45 seconds (approx.) in YouTube Video Stream\n *\n * const resource = createAudioResource(source.stream, {\n *      inputType : source.type\n * }) // Use discordjs voice createAudioResource function.\n * ```\n * @param info YouTube video info OR SoundCloud track Class\n * @param options\n *\n *  - `number` seek : No of seconds to seek in stream.\n *  - `string` language : Sets language of searched content [ YouTube search only. ], e.g. \"en-US\"\n *  - `number` quality : Quality number. [ 0 = Lowest, 1 = Medium, 2 = Highest ]\n *  - `boolean` htmldata : given data is html data or not\n *  - `number` precache : No of segments of data to store before looping [YouTube Live Stream only]. [ Defaults to 3 ]\n *  - `boolean` discordPlayerCompatibility : Conversion of Webm to Opus[ Defaults to false ]\n * @returns A {@link YouTubeStream} or {@link SoundCloudStream} Stream to play\n */\nasync function stream_from_info(\n    info: InfoData | SoundCloudTrack,\n    options: StreamOptions = {}\n): Promise<YouTubeStream | SoundCloudStream> {\n    if (info instanceof SoundCloudTrack) return await so_stream_info(info, options.quality);\n    else return await yt_stream_info(info, options);\n}\n/**\n * Validates url that play-dl supports.\n *\n * - `so` - SoundCloud\n * - `sp` - Spotify\n * - `dz` - Deezer\n * - `yt` - YouTube\n * @param url URL\n * @returns\n * ```ts\n * 'so_playlist' / 'so_track' | 'sp_track' | 'sp_album' | 'sp_playlist' | 'dz_track' | 'dz_playlist' | 'dz_album' | 'yt_video' | 'yt_playlist' | 'search' | false\n * ```\n */\nasync function validate(\n    url: string\n): Promise<\n    | 'so_playlist'\n    | 'so_track'\n    | 'sp_track'\n    | 'sp_album'\n    | 'sp_playlist'\n    | 'dz_track'\n    | 'dz_playlist'\n    | 'dz_album'\n    | 'yt_video'\n    | 'yt_playlist'\n    | 'search'\n    | false\n> {\n    let check;\n    const url_ = url.trim();\n    if (!url_.startsWith('https')) return 'search';\n    if (url_.indexOf('spotify') !== -1) {\n        check = sp_validate(url_);\n        return check !== false ? (('sp_' + check) as 'sp_track' | 'sp_album' | 'sp_playlist') : false;\n    } else if (url_.indexOf('soundcloud') !== -1) {\n        check = await so_validate(url_);\n        return check !== false ? (('so_' + check) as 'so_playlist' | 'so_track') : false;\n    } else if (url_.indexOf('deezer') !== -1) {\n        check = await dz_validate(url_);\n        return check !== false ? (('dz_' + check) as 'dz_track' | 'dz_playlist' | 'dz_album') : false;\n    } else {\n        check = yt_validate(url_);\n        return check !== false ? (('yt_' + check) as 'yt_video' | 'yt_playlist') : false;\n    }\n}\n/**\n * Authorization interface for Spotify, SoundCloud and YouTube.\n *\n * Either stores info in `.data` folder or shows relevant data to be used in `setToken` function.\n *\n * ```ts\n * const play = require('play-dl')\n *\n * play.authorization()\n * ```\n *\n * Just run the above command and you will get a interface asking some questions.\n */\nfunction authorization(): void {\n    const ask = createInterface({\n        input: process.stdin,\n        output: process.stdout\n    });\n    ask.question('Do you want to save data in a file ? (Yes / No): ', (msg) => {\n        let file: boolean;\n        if (msg.toLowerCase() === 'yes') file = true;\n        else if (msg.toLowerCase() === 'no') file = false;\n        else {\n            console.log(\"That option doesn't exist. Try again...\");\n            ask.close();\n            return;\n        }\n        ask.question('Choose your service - sc (for SoundCloud) / sp (for Spotify)  / yo (for YouTube): ', (msg) => {\n            if (msg.toLowerCase().startsWith('sp')) {\n                let client_id: string, client_secret: string, redirect_url: string, market: string;\n                ask.question('Start by entering your Client ID : ', (id) => {\n                    client_id = id;\n                    ask.question('Now enter your Client Secret : ', (secret) => {\n                        client_secret = secret;\n                        ask.question('Enter your Redirect URL now : ', (url) => {\n                            redirect_url = url;\n                            console.log(\n                                '\\nIf you would like to know your region code visit : \\nhttps://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements \\n'\n                            );\n                            ask.question('Enter your region code (2-letter country code) : ', (mar) => {\n                                if (mar.length === 2) market = mar;\n                                else {\n                                    console.log(\n                                        \"That doesn't look like a valid region code, IN will be selected as default.\"\n                                    );\n                                    market = 'IN';\n                                }\n                                console.log(\n                                    '\\nNow open your browser and paste the below url, then authorize it and copy the redirected url. \\n'\n                                );\n                                console.log(\n                                    `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURI(\n                                        redirect_url\n                                    )} \\n`\n                                );\n                                ask.question('Paste the url which you just copied : ', async (url) => {\n                                    if (!existsSync('.data')) mkdirSync('.data');\n                                    const spotifyData = {\n                                        client_id,\n                                        client_secret,\n                                        redirect_url,\n                                        authorization_code: url.split('code=')[1],\n                                        market\n                                    };\n                                    const check = await SpotifyAuthorize(spotifyData, file);\n                                    if (check === false) throw new Error('Failed to get access token.');\n                                    ask.close();\n                                });\n                            });\n                        });\n                    });\n                });\n            } else if (msg.toLowerCase().startsWith('sc')) {\n                if (!file) {\n                    console.log('You already had a client ID, just paste that in setToken function.');\n                    ask.close();\n                    return;\n                }\n                ask.question('Client ID : ', async (id) => {\n                    let client_id = id;\n                    if (!client_id) {\n                        console.log(\"You didn't provide a client ID. Try again...\");\n                        ask.close();\n                        return;\n                    }\n                    if (!existsSync('.data')) mkdirSync('.data');\n                    console.log('Validating your client ID, hold on...');\n                    if (await check_id(client_id)) {\n                        console.log('Client ID has been validated successfully.');\n                        writeFileSync('.data/soundcloud.data', JSON.stringify({ client_id }, undefined, 4));\n                    } else console.log(\"That doesn't look like a valid client ID. Retry with a correct client ID.\");\n                    ask.close();\n                });\n            } else if (msg.toLowerCase().startsWith('yo')) {\n                if (!file) {\n                    console.log('You already had cookie, just paste that in setToken function.');\n                    ask.close();\n                    return;\n                }\n                ask.question('Cookies : ', (cook: string) => {\n                    if (!cook || cook.length === 0) {\n                        console.log(\"You didn't provide a cookie. Try again...\");\n                        ask.close();\n                        return;\n                    }\n                    if (!existsSync('.data')) mkdirSync('.data');\n                    console.log('Cookies has been added successfully.');\n                    let cookie: Object = {};\n                    cook.split(';').forEach((x) => {\n                        const arr = x.split('=');\n                        if (arr.length <= 1) return;\n                        const key = arr.shift()?.trim() as string;\n                        const value = arr.join('=').trim();\n                        Object.assign(cookie, { [key]: value });\n                    });\n                    writeFileSync('.data/youtube.data', JSON.stringify({ cookie }, undefined, 4));\n                    ask.close();\n                });\n            } else {\n                console.log(\"That option doesn't exist. Try again...\");\n                ask.close();\n            }\n        });\n    });\n}\n/**\n * Attaches paused, playing, autoPaused Listeners to discordjs voice AudioPlayer.\n *\n * Useful if you don't want extra data to be downloaded by play-dl.\n * @param player discordjs voice AudioPlayer\n * @param resource A {@link YouTubeStream} or {@link SoundCloudStream}\n */\nfunction attachListeners(player: EventEmitter, resource: YouTubeStream | SoundCloudStream) {\n    // cleanup existing listeners if they are still registered\n    type listenerType = (...args: any[]) => void;\n\n    const listeners = player.listeners(AudioPlayerStatus.Idle);\n    for (const cleanup of listeners) {\n        if ((cleanup as any).__playDlAttachedListener) {\n            cleanup();\n            player.removeListener(AudioPlayerStatus.Idle, cleanup as listenerType);\n        }\n    }\n\n    const pauseListener = () => resource.pause();\n    const resumeListener = () => resource.resume();\n    const idleListener = () => {\n        player.removeListener(AudioPlayerStatus.Paused, pauseListener);\n        player.removeListener(AudioPlayerStatus.AutoPaused, pauseListener);\n        player.removeListener(AudioPlayerStatus.Playing, resumeListener);\n    };\n    pauseListener.__playDlAttachedListener = true;\n    resumeListener.__playDlAttachedListener = true;\n    idleListener.__playDlAttachedListener = true;\n    player.on(AudioPlayerStatus.Paused, pauseListener);\n    player.on(AudioPlayerStatus.AutoPaused, pauseListener);\n    player.on(AudioPlayerStatus.Playing, resumeListener);\n    player.once(AudioPlayerStatus.Idle, idleListener);\n}\n\n// Export Main Commands\nexport {\n    DeezerAlbum,\n    DeezerPlaylist,\n    DeezerTrack,\n    SoundCloudPlaylist,\n    SoundCloudStream,\n    SoundCloudTrack,\n    SpotifyAlbum,\n    SpotifyPlaylist,\n    SpotifyTrack,\n    YouTubeChannel,\n    YouTubePlayList,\n    YouTubeVideo,\n    attachListeners,\n    authorization,\n    decipher_info,\n    deezer,\n    dz_advanced_track_search,\n    dz_validate,\n    extractID,\n    getFreeClientID,\n    is_expired,\n    playlist_info,\n    refreshToken,\n    search,\n    setToken,\n    so_validate,\n    soundcloud,\n    spotify,\n    sp_validate,\n    stream,\n    stream_from_info,\n    validate,\n    video_basic_info,\n    video_info,\n    yt_validate,\n    InfoData,\n    SeekStream\n};\n\n// Export Types\nexport { Deezer, YouTube, SoundCloud, Spotify, YouTubeStream };\n\n// Export Default\nexport default {\n    DeezerAlbum,\n    DeezerPlaylist,\n    DeezerTrack,\n    SoundCloudPlaylist,\n    SoundCloudStream,\n    SoundCloudTrack,\n    SpotifyAlbum,\n    SpotifyPlaylist,\n    SpotifyTrack,\n    YouTubeChannel,\n    YouTubePlayList,\n    YouTubeVideo,\n    attachListeners,\n    authorization,\n    decipher_info,\n    deezer,\n    dz_advanced_track_search,\n    dz_validate,\n    extractID,\n    getFreeClientID,\n    is_expired,\n    playlist_info,\n    refreshToken,\n    search,\n    setToken,\n    so_validate,\n    soundcloud,\n    spotify,\n    sp_validate,\n    stream,\n    stream_from_info,\n    validate,\n    video_basic_info,\n    video_info,\n    yt_validate\n};\n"]}