{"version":3,"file":"LiveStream.js","sourceRoot":"","sources":["../../../play-dl/YouTube/classes/LiveStream.ts"],"names":[],"mappings":";;;AAAA,6CAAuC;AAEvC,sCAAyE;AACzE,2CAAwD;AACxD,kDAAuD;AACvD,uCAA+B;AAE/B;;GAEG;AACH,MAAa,UAAU;IAoDnB;;;;;OAKG;IACH,YAAY,QAAgB,EAAE,QAAgB,EAAE,SAAiB,EAAE,QAAiB;QAChF,IAAI,CAAC,MAAM,GAAG,IAAI,sBAAQ,CAAC,EAAE,aAAa,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,EAAE,IAAI,KAAI,CAAC,EAAE,CAAC,CAAC;QAC1E,IAAI,CAAC,IAAI,GAAG,mBAAU,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE;YAC7B,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QAC5B,CAAC,EAAE,IAAI,CAAC,CAAC;QACT,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IACD;;;;OAIG;IACK,OAAO;QACX,IAAI,CAAC,YAAY,EAAE,OAAO,EAAE,CAAC;QAC7B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QAC1B,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IACtB,CAAC;IACD;;;;OAIG;IACK,KAAK,CAAC,YAAY;QACtB,MAAM,IAAI,GAAG,MAAM,IAAA,6BAAiB,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrD,IAAI,IAAI,CAAC,cAAc,CAAC,eAAe;YAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC;QAC7F,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IAClC,CAAC;IACD;;;;OAIG;IACK,KAAK,CAAC,eAAe;QACzB,MAAM,QAAQ,GAAG,MAAM,IAAA,iBAAO,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9C,MAAM,WAAW,GAAG,QAAQ;aACvB,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;aACjC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;aAC5B,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAChC,IAAI,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE;YAAE,WAAW,CAAC,GAAG,EAAE,CAAC;QAClE,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QACjG,MAAM,IAAA,wBAAc,EAAC,WAAW,IAAI,cAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,eAAe,CAAC,CAAC;QAC5E,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,EAAE;YACrB,MAAM,IAAI,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;iBAC3C,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;iBACzB,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;iBAC1B,UAAU,CAAC,qBAAqB,EAAE,EAAE,CAAC;iBACrC,KAAK,CAAC,KAAK,CAAC,CAAC;YAClB,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE;gBAAE,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7C,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ;gBAAE,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7E,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAChC;IACL,CAAC;IACD;;;OAGG;IACK,KAAK,CAAC,UAAU,CAAC,GAAW;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,EAAE,EAAE;YAC3B,MAAM,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;gBAChC,MAAM,MAAM,GAAG,MAAM,IAAA,wBAAc,EAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;gBACtG,IAAI,MAAM,YAAY,KAAK,EAAE;oBACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBAClC,OAAO;iBACV;gBACD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;gBACtB,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE;oBACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACxB,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;oBAClB,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAChB,OAAO,CAAC,EAAE,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;oBACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;SACN;QACD,IAAI,CAAC,YAAY,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE;YAC/B,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,IAAI,CAAC,YAAY,EAAE,KAAK,EAAE,CAAC;QAC/B,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtB,CAAC;IACD;;;;OAIG;IACK,IAAI;QACR,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YACjC,MAAM,MAAM,GAAG,MAAM,IAAA,wBAAc,EAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;YACtG,IAAI,MAAM,YAAY,KAAK,EAAE;gBACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAClC,OAAO;aACV;YACD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE;gBACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBAClB,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,OAAO,CAAC,EAAE,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;gBACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;OAEG;IACH,KAAK,KAAI,CAAC;IACV;;OAEG;IACH,MAAM,KAAI,CAAC;CACd;AA9LD,gCA8LC;AACD;;GAEG;AACH,MAAa,MAAM;IA4Cf;;;;;;;;OAQG;IACH,YACI,GAAW,EACX,IAAgB,EAChB,QAAgB,EAChB,aAAqB,EACrB,SAAiB,EACjB,OAAsB;QAEtB,IAAI,CAAC,MAAM,GAAG,IAAI,sBAAQ,CAAC,EAAE,aAAa,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,EAAE,IAAI,KAAI,CAAC,EAAE,CAAC,CAAC;QAC1E,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAiB,CAAC;QACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,CAAC;QACzD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE;YACxB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC,EAAE,GAAG,CAAC,CAAC;QACR,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YACrB,IAAI,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IACD;;OAEG;IACK,KAAK,CAAC,KAAK;QACf,MAAM,IAAI,GAAG,MAAM,IAAA,6BAAiB,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrD,MAAM,WAAW,GAAG,IAAA,0BAAiB,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC;IAC7C,CAAC;IACD;;;;OAIG;IACK,OAAO;QACX,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAClB,CAAC;IACD;;;;OAIG;IACK,KAAK,CAAC,IAAI;QACd,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YACvB,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YACrB,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,OAAO;SACV;QACD,MAAM,GAAG,GAAW,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;QAChE,MAAM,MAAM,GAAG,MAAM,IAAA,wBAAc,EAAC,IAAI,CAAC,GAAG,EAAE;YAC1C,OAAO,EAAE;gBACL,KAAK,EAAE,SAAS,IAAI,CAAC,WAAW,IAAI,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE;aAC9E;SACJ,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,MAAM,YAAY,KAAK,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAClC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;YACvB,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,OAAO;SACV;QACD,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,GAAG,EAAE;YAClC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,OAAO;SACV;QACD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE;YACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;YAC5B,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAU,EAAE,EAAE;YAC7B,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC,MAAM,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;YAClB,IAAI,GAAG,IAAI,IAAI,CAAC,cAAc,EAAE;gBAC5B,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;gBACrB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACvB,IAAI,CAAC,OAAO,EAAE,CAAC;aAClB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;;;OAKG;IACH,KAAK;QACD,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IACD;;;OAGG;IACH,MAAM;QACF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;IACxB,CAAC;CACJ;AAzKD,wBAyKC;AACD;;;;GAIG;AACH,MAAa,KAAK;IA6Bd;;;;OAIG;IACH,YAAY,QAAoB,EAAE,IAAY;QAC1C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC;IACnE,CAAC;IACD;;;OAGG;IACH,KAAK;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;YAC1E,OAAO,IAAI,CAAC;SACf;;YAAM,OAAO,KAAK,CAAC;IACxB,CAAC;IACD;;;OAGG;IACH,MAAM;QACF,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YAChC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC;SACf;;YAAM,OAAO,KAAK,CAAC;IACxB,CAAC;IACD;;;OAGG;IACH,KAAK;QACD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;YACjC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC;YAC/D,OAAO,IAAI,CAAC;SACf;;YAAM,OAAO,KAAK,CAAC;IACxB,CAAC;IACD;;;;OAIG;IACH,OAAO;QACH,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IACxB,CAAC;CACJ;AA/FD,sBA+FC","sourcesContent":["import { Readable } from 'node:stream';\nimport { IncomingMessage } from 'node:http';\nimport { parseAudioFormats, StreamOptions, StreamType } from '../stream';\nimport { request, request_stream } from '../../Request';\nimport { video_stream_info } from '../utils/extractor';\nimport { URL } from 'node:url';\n\n/**\n * YouTube Live Stream class for playing audio from Live Stream videos.\n */\nexport class LiveStream {\n    /**\n     * Readable Stream through which data passes\n     */\n    stream: Readable;\n    /**\n     * Type of audio data that we recieved from live stream youtube url.\n     */\n    type: StreamType;\n    /**\n     * Incoming message that we recieve.\n     *\n     * Storing this is essential.\n     * This helps to destroy the TCP connection completely if you stopped player in between the stream\n     */\n    private request?: IncomingMessage;\n    /**\n     * Timer that creates loop from interval time provided.\n     */\n    private normal_timer?: Timer;\n    /**\n     * Timer used to update dash url so as to avoid 404 errors after long hours of streaming.\n     *\n     * It updates dash_url every 30 minutes.\n     */\n    private dash_timer: Timer;\n    /**\n     * Given Dash URL.\n     */\n    private dash_url: string;\n    /**\n     * Base URL in dash manifest file.\n     */\n    private base_url: string;\n    /**\n     * Interval to fetch data again to dash url.\n     */\n    private interval: number;\n    /**\n     * Timer used to update dash url so as to avoid 404 errors after long hours of streaming.\n     *\n     * It updates dash_url every 30 minutes.\n     */\n    private video_url: string;\n    /**\n     * No of segments of data to add in stream before starting to loop\n     */\n    private precache: number;\n    /**\n     * Segment sequence number\n     */\n    private sequence: number;\n    /**\n     * Live Stream Class Constructor\n     * @param dash_url dash manifest URL\n     * @param target_interval interval time for fetching dash data again\n     * @param video_url Live Stream video url.\n     */\n    constructor(dash_url: string, interval: number, video_url: string, precache?: number) {\n        this.stream = new Readable({ highWaterMark: 5 * 1000 * 1000, read() {} });\n        this.type = StreamType.Arbitrary;\n        this.sequence = 0;\n        this.dash_url = dash_url;\n        this.base_url = '';\n        this.interval = interval;\n        this.video_url = video_url;\n        this.precache = precache || 3;\n        this.dash_timer = new Timer(() => {\n            this.dash_updater();\n            this.dash_timer.reuse();\n        }, 1800);\n        this.stream.on('close', () => {\n            this.cleanup();\n        });\n        this.initialize_dash();\n    }\n    /**\n     * This cleans every used variable in class.\n     *\n     * This is used to prevent re-use of this class and helping garbage collector to collect it.\n     */\n    private cleanup() {\n        this.normal_timer?.destroy();\n        this.dash_timer.destroy();\n        this.request?.destroy();\n        this.video_url = '';\n        this.request = undefined;\n        this.dash_url = '';\n        this.base_url = '';\n        this.interval = 0;\n    }\n    /**\n     * Updates dash url.\n     *\n     * Used by dash_timer for updating dash_url every 30 minutes.\n     */\n    private async dash_updater() {\n        const info = await video_stream_info(this.video_url);\n        if (info.LiveStreamData.dashManifestUrl) this.dash_url = info.LiveStreamData.dashManifestUrl;\n        return this.initialize_dash();\n    }\n    /**\n     * Initializes dash after getting dash url.\n     *\n     * Start if it is first time of initialishing dash function.\n     */\n    private async initialize_dash() {\n        const response = await request(this.dash_url);\n        const audioFormat = response\n            .split('<AdaptationSet id=\"0\"')[1]\n            .split('</AdaptationSet>')[0]\n            .split('</Representation>');\n        if (audioFormat[audioFormat.length - 1] === '') audioFormat.pop();\n        this.base_url = audioFormat[audioFormat.length - 1].split('<BaseURL>')[1].split('</BaseURL>')[0];\n        await request_stream(`https://${new URL(this.base_url).host}/generate_204`);\n        if (this.sequence === 0) {\n            const list = audioFormat[audioFormat.length - 1]\n                .split('<SegmentList>')[1]\n                .split('</SegmentList>')[0]\n                .replaceAll('<SegmentURL media=\"', '')\n                .split('\"/>');\n            if (list[list.length - 1] === '') list.pop();\n            if (list.length > this.precache) list.splice(0, list.length - this.precache);\n            this.sequence = Number(list[0].split('sq/')[1].split('/')[0]);\n            this.first_data(list.length);\n        }\n    }\n    /**\n     * Used only after initializing dash function first time.\n     * @param len Length of data that you want to\n     */\n    private async first_data(len: number) {\n        for (let i = 1; i <= len; i++) {\n            await new Promise(async (resolve) => {\n                const stream = await request_stream(this.base_url + 'sq/' + this.sequence).catch((err: Error) => err);\n                if (stream instanceof Error) {\n                    this.stream.emit('error', stream);\n                    return;\n                }\n                this.request = stream;\n                stream.on('data', (c) => {\n                    this.stream.push(c);\n                });\n                stream.on('end', () => {\n                    this.sequence++;\n                    resolve('');\n                });\n                stream.once('error', (err) => {\n                    this.stream.emit('error', err);\n                });\n            });\n        }\n        this.normal_timer = new Timer(() => {\n            this.loop();\n            this.normal_timer?.reuse();\n        }, this.interval);\n    }\n    /**\n     * This loops function in Live Stream Class.\n     *\n     * Gets next segment and push it.\n     */\n    private loop() {\n        return new Promise(async (resolve) => {\n            const stream = await request_stream(this.base_url + 'sq/' + this.sequence).catch((err: Error) => err);\n            if (stream instanceof Error) {\n                this.stream.emit('error', stream);\n                return;\n            }\n            this.request = stream;\n            stream.on('data', (c) => {\n                this.stream.push(c);\n            });\n            stream.on('end', () => {\n                this.sequence++;\n                resolve('');\n            });\n            stream.once('error', (err) => {\n                this.stream.emit('error', err);\n            });\n        });\n    }\n    /**\n     * Deprecated Functions\n     */\n    pause() {}\n    /**\n     * Deprecated Functions\n     */\n    resume() {}\n}\n/**\n * YouTube Stream Class for playing audio from normal videos.\n */\nexport class Stream {\n    /**\n     * Readable Stream through which data passes\n     */\n    stream: Readable;\n    /**\n     * Type of audio data that we recieved from normal youtube url.\n     */\n    type: StreamType;\n    /**\n     * Audio Endpoint Format Url to get data from.\n     */\n    private url: string;\n    /**\n     * Used to calculate no of bytes data that we have recieved\n     */\n    private bytes_count: number;\n    /**\n     * Calculate per second bytes by using contentLength (Total bytes) / Duration (in seconds)\n     */\n    private per_sec_bytes: number;\n    /**\n     * Total length of audio file in bytes\n     */\n    private content_length: number;\n    /**\n     * YouTube video url. [ Used only for retrying purposes only. ]\n     */\n    private video_url: string;\n    /**\n     * Timer for looping data every 265 seconds.\n     */\n    private timer: Timer;\n    /**\n     * Quality given by user. [ Used only for retrying purposes only. ]\n     */\n    private quality: number;\n    /**\n     * Incoming message that we recieve.\n     *\n     * Storing this is essential.\n     * This helps to destroy the TCP connection completely if you stopped player in between the stream\n     */\n    private request: IncomingMessage | null;\n    /**\n     * YouTube Stream Class constructor\n     * @param url Audio Endpoint url.\n     * @param type Type of Stream\n     * @param duration Duration of audio playback [ in seconds ]\n     * @param contentLength Total length of Audio file in bytes.\n     * @param video_url YouTube video url.\n     * @param options Options provided to stream function.\n     */\n    constructor(\n        url: string,\n        type: StreamType,\n        duration: number,\n        contentLength: number,\n        video_url: string,\n        options: StreamOptions\n    ) {\n        this.stream = new Readable({ highWaterMark: 5 * 1000 * 1000, read() {} });\n        this.url = url;\n        this.quality = options.quality as number;\n        this.type = type;\n        this.bytes_count = 0;\n        this.video_url = video_url;\n        this.per_sec_bytes = Math.ceil(contentLength / duration);\n        this.content_length = contentLength;\n        this.request = null;\n        this.timer = new Timer(() => {\n            this.timer.reuse();\n            this.loop();\n        }, 265);\n        this.stream.on('close', () => {\n            this.timer.destroy();\n            this.cleanup();\n        });\n        this.loop();\n    }\n    /**\n     * Retry if we get 404 or 403 Errors.\n     */\n    private async retry() {\n        const info = await video_stream_info(this.video_url);\n        const audioFormat = parseAudioFormats(info.format);\n        this.url = audioFormat[this.quality].url;\n    }\n    /**\n     * This cleans every used variable in class.\n     *\n     * This is used to prevent re-use of this class and helping garbage collector to collect it.\n     */\n    private cleanup() {\n        this.request?.destroy();\n        this.request = null;\n        this.url = '';\n    }\n    /**\n     * Getting data from audio endpoint url and passing it to stream.\n     *\n     * If 404 or 403 occurs, it will retry again.\n     */\n    private async loop() {\n        if (this.stream.destroyed) {\n            this.timer.destroy();\n            this.cleanup();\n            return;\n        }\n        const end: number = this.bytes_count + this.per_sec_bytes * 300;\n        const stream = await request_stream(this.url, {\n            headers: {\n                range: `bytes=${this.bytes_count}-${end >= this.content_length ? '' : end}`\n            }\n        }).catch((err: Error) => err);\n        if (stream instanceof Error) {\n            this.stream.emit('error', stream);\n            this.bytes_count = 0;\n            this.per_sec_bytes = 0;\n            this.cleanup();\n            return;\n        }\n        if (Number(stream.statusCode) >= 400) {\n            this.cleanup();\n            await this.retry();\n            this.timer.reuse();\n            this.loop();\n            return;\n        }\n        this.request = stream;\n        stream.on('data', (c) => {\n            this.stream.push(c);\n        });\n\n        stream.once('error', async () => {\n            this.cleanup();\n            await this.retry();\n            this.timer.reuse();\n            this.loop();\n        });\n\n        stream.on('data', (chunk: any) => {\n            this.bytes_count += chunk.length;\n        });\n\n        stream.on('end', () => {\n            if (end >= this.content_length) {\n                this.timer.destroy();\n                this.stream.push(null);\n                this.cleanup();\n            }\n        });\n    }\n    /**\n     * Pauses timer.\n     * Stops running of loop.\n     *\n     * Useful if you don't want to get excess data to be stored in stream.\n     */\n    pause() {\n        this.timer.pause();\n    }\n    /**\n     * Resumes timer.\n     * Starts running of loop.\n     */\n    resume() {\n        this.timer.resume();\n    }\n}\n/**\n * Timer Class.\n *\n * setTimeout + extra features ( re-starting, pausing, resuming ).\n */\nexport class Timer {\n    /**\n     * Boolean for checking if Timer is destroyed or not.\n     */\n    private destroyed: boolean;\n    /**\n     * Boolean for checking if Timer is paused or not.\n     */\n    private paused: boolean;\n    /**\n     * setTimeout function\n     */\n    private timer: NodeJS.Timer;\n    /**\n     * Callback to be executed once timer finishes.\n     */\n    private callback: () => void;\n    /**\n     * Seconds time when it is started.\n     */\n    private time_start: number;\n    /**\n     * Total time left.\n     */\n    private time_left: number;\n    /**\n     * Total time given by user [ Used only for re-using timer. ]\n     */\n    private time_total: number;\n    /**\n     * Constructor for Timer Class\n     * @param callback Function to execute when timer is up.\n     * @param time Total time to wait before execution.\n     */\n    constructor(callback: () => void, time: number) {\n        this.callback = callback;\n        this.time_total = time;\n        this.time_left = time;\n        this.paused = false;\n        this.destroyed = false;\n        this.time_start = process.hrtime()[0];\n        this.timer = setTimeout(this.callback, this.time_total * 1000);\n    }\n    /**\n     * Pauses Timer\n     * @returns Boolean to tell that if it is paused or not.\n     */\n    pause() {\n        if (!this.paused && !this.destroyed) {\n            this.paused = true;\n            clearTimeout(this.timer);\n            this.time_left = this.time_left - (process.hrtime()[0] - this.time_start);\n            return true;\n        } else return false;\n    }\n    /**\n     * Resumes Timer\n     * @returns Boolean to tell that if it is resumed or not.\n     */\n    resume() {\n        if (this.paused && !this.destroyed) {\n            this.paused = false;\n            this.time_start = process.hrtime()[0];\n            this.timer = setTimeout(this.callback, this.time_left * 1000);\n            return true;\n        } else return false;\n    }\n    /**\n     * Reusing of timer\n     * @returns Boolean to tell if it is re-used or not.\n     */\n    reuse() {\n        if (!this.destroyed) {\n            clearTimeout(this.timer);\n            this.time_left = this.time_total;\n            this.paused = false;\n            this.time_start = process.hrtime()[0];\n            this.timer = setTimeout(this.callback, this.time_total * 1000);\n            return true;\n        } else return false;\n    }\n    /**\n     * Destroy timer.\n     *\n     * It can't be used again.\n     */\n    destroy() {\n        clearTimeout(this.timer);\n        this.destroyed = true;\n        this.callback = () => {};\n        this.time_total = 0;\n        this.time_left = 0;\n        this.paused = false;\n        this.time_start = 0;\n    }\n}\n"]}