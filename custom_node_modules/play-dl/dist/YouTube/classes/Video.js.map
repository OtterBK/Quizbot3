{"version":3,"file":"Video.js","sourceRoot":"","sources":["../../../play-dl/YouTube/classes/Video.ts"],"names":[],"mappings":"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","sourcesContent":["import { YouTubeChannel } from './Channel';\nimport { YouTubeThumbnail } from './Thumbnail';\n\n/**\n * Licensed music in the video\n * \n * The property names change depending on your region's language.\n */\ninterface VideoMusic {\n    song?: string;\n    url?: string | null;\n    artist?: string;\n    album?: string;\n    writers?: string;\n    licenses?: string;\n}\n\ninterface VideoOptions {\n    /**\n     * YouTube Video ID\n     */\n    id?: string;\n    /**\n     * YouTube video url\n     */\n    url: string;\n    /**\n     * YouTube Video title\n     */\n    title?: string;\n    /**\n     * YouTube Video description.\n     */\n    description?: string;\n    /**\n     * YouTube Video Duration Formatted\n     */\n    durationRaw: string;\n    /**\n     * YouTube Video Duration in seconds\n     */\n    durationInSec: number;\n    /**\n     * YouTube Video Uploaded Date\n     */\n    uploadedAt?: string;\n    /**\n     * If the video is upcoming or a premiere that isn't currently live, this will contain the premiere date, for watch page playlists this will be true, it defaults to undefined\n     */\n    upcoming?: Date | true;\n    /**\n     * YouTube Views\n     */\n    views: number;\n    /**\n     * YouTube Thumbnail Data\n     */\n    thumbnail?: {\n        width: number | undefined;\n        height: number | undefined;\n        url: string | undefined;\n    };\n    /**\n     * YouTube Video's uploader Channel Data\n     */\n    channel?: YouTubeChannel;\n    /**\n     * YouTube Video's likes\n     */\n    likes: number;\n    /**\n     * YouTube Video live status\n     */\n    live: boolean;\n    /**\n     * YouTube Video private status\n     */\n    private: boolean;\n    /**\n     * YouTube Video tags\n     */\n    tags: string[];\n    /**\n     * `true` if the video has been identified by the YouTube community as inappropriate or offensive to some audiences and viewer discretion is advised\n     */\n    discretionAdvised?: boolean;\n    /**\n     * Gives info about music content in that video.\n     * \n     * The property names of VideoMusic change depending on your region's language.\n     */\n    music?: VideoMusic[];\n    /**\n     * The chapters for this video\n     *\n     * If the video doesn't have any chapters or if the video object wasn't created by {@link video_basic_info} or {@link video_info} this will be an empty array.\n     */\n    chapters: VideoChapter[];\n}\n\nexport interface VideoChapter {\n    /**\n     * The title of the chapter\n     */\n    title: string;\n    /**\n     * The timestamp of the start of the chapter\n     */\n    timestamp: string;\n    /**\n     * The start of the chapter in seconds\n     */\n    seconds: number;\n    /**\n     * Thumbnails of the frame at the start of this chapter\n     */\n    thumbnails: YouTubeThumbnail[];\n}\n\n/**\n * Class for YouTube Video url\n */\nexport class YouTubeVideo {\n    /**\n     * YouTube Video ID\n     */\n    id?: string;\n    /**\n     * YouTube video url\n     */\n    url: string;\n    /**\n     * YouTube Class type. == \"video\"\n     */\n    type: 'video' | 'playlist' | 'channel';\n    /**\n     * YouTube Video title\n     */\n    title?: string;\n    /**\n     * YouTube Video description.\n     */\n    description?: string;\n    /**\n     * YouTube Video Duration Formatted\n     */\n    durationRaw: string;\n    /**\n     * YouTube Video Duration in seconds\n     */\n    durationInSec: number;\n    /**\n     * YouTube Video Uploaded Date\n     */\n    uploadedAt?: string;\n    /**\n     * YouTube Live Date\n     */\n    liveAt?: string;\n    /**\n     * If the video is upcoming or a premiere that isn't currently live, this will contain the premiere date, for watch page playlists this will be true, it defaults to undefined\n     */\n    upcoming?: Date | true;\n    /**\n     * YouTube Views\n     */\n    views: number;\n    /**\n     * YouTube Thumbnail Data\n     */\n    thumbnails: YouTubeThumbnail[];\n    /**\n     * YouTube Video's uploader Channel Data\n     */\n    channel?: YouTubeChannel;\n    /**\n     * YouTube Video's likes\n     */\n    likes: number;\n    /**\n     * YouTube Video live status\n     */\n    live: boolean;\n    /**\n     * YouTube Video private status\n     */\n    private: boolean;\n    /**\n     * YouTube Video tags\n     */\n    tags: string[];\n    /**\n     * `true` if the video has been identified by the YouTube community as inappropriate or offensive to some audiences and viewer discretion is advised\n     */\n    discretionAdvised?: boolean;\n    /**\n     * Gives info about music content in that video.\n     */\n    music?: VideoMusic[];\n    /**\n     * The chapters for this video\n     *\n     * If the video doesn't have any chapters or if the video object wasn't created by {@link video_basic_info} or {@link video_info} this will be an empty array.\n     */\n    chapters: VideoChapter[];\n    /**\n     * Constructor for YouTube Video Class\n     * @param data JSON parsed data.\n     */\n    constructor(data: any) {\n        if (!data) throw new Error(`Can not initiate ${this.constructor.name} without data`);\n\n        this.id = data.id || undefined;\n        this.url = `https://www.youtube.com/watch?v=${this.id}`;\n        this.type = 'video';\n        this.title = data.title || undefined;\n        this.description = data.description || undefined;\n        this.durationRaw = data.duration_raw || '0:00';\n        this.durationInSec = (data.duration < 0 ? 0 : data.duration) || 0;\n        this.uploadedAt = data.uploadedAt || undefined;\n        this.liveAt = data.liveAt || undefined;\n        this.upcoming = data.upcoming;\n        this.views = parseInt(data.views) || 0;\n        const thumbnails = [];\n        for (const thumb of data.thumbnails) {\n            thumbnails.push(new YouTubeThumbnail(thumb));\n        }\n        this.thumbnails = thumbnails || [];\n        this.channel = new YouTubeChannel(data.channel) || {};\n        this.likes = data.likes || 0;\n        this.live = !!data.live;\n        this.private = !!data.private;\n        this.tags = data.tags || [];\n        this.discretionAdvised = data.discretionAdvised ?? undefined;\n        this.music = data.music || [];\n        this.chapters = data.chapters || [];\n    }\n    /**\n     * Converts class to title name of video.\n     * @returns Title name\n     */\n    toString(): string {\n        return this.url || '';\n    }\n    /**\n     * Converts class to JSON data\n     * @returns JSON data.\n     */\n    toJSON(): VideoOptions {\n        return {\n            id: this.id,\n            url: this.url,\n            title: this.title,\n            description: this.description,\n            durationInSec: this.durationInSec,\n            durationRaw: this.durationRaw,\n            uploadedAt: this.uploadedAt,\n            thumbnail: this.thumbnails[this.thumbnails.length - 1].toJSON() || this.thumbnails,\n            channel: this.channel,\n            views: this.views,\n            tags: this.tags,\n            likes: this.likes,\n            live: this.live,\n            private: this.private,\n            discretionAdvised: this.discretionAdvised,\n            music: this.music,\n            chapters: this.chapters\n        };\n    }\n}\n"]}