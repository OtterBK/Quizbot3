{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../play-dl/YouTube/stream.ts"],"names":[],"mappings":"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","sourcesContent":["import { request_content_length, request_stream } from '../Request';\nimport { LiveStream, Stream } from './classes/LiveStream';\nimport { SeekStream } from './classes/SeekStream';\nimport { InfoData, StreamInfoData } from './utils/constants';\nimport { video_stream_info } from './utils/extractor';\nimport { URL } from 'node:url';\n\nexport enum StreamType {\n    Arbitrary = 'arbitrary',\n    Raw = 'raw',\n    OggOpus = 'ogg/opus',\n    WebmOpus = 'webm/opus',\n    Opus = 'opus'\n}\n\nexport interface StreamOptions {\n    seek?: number;\n    quality?: number;\n    language?: string;\n    htmldata?: boolean;\n    precache?: number;\n    discordPlayerCompatibility?: boolean;\n    file?: boolean;\n}\n\n/**\n * Command to find audio formats from given format array\n * @param formats Formats to search from\n * @returns Audio Formats array\n */\nexport function parseAudioFormats(formats: any[]) {\n    const result: any[] = [];\n    formats.forEach((format) => {\n        const type = format.mimeType as string;\n        if (type.startsWith('audio')) {\n            format.codec = type.split('codecs=\"')[1].split('\"')[0];\n            format.container = type.split('audio/')[1].split(';')[0];\n            result.push(format);\n        }\n    });\n    return result;\n}\n/**\n * Type for YouTube Stream\n */\nexport type YouTubeStream = Stream | LiveStream | SeekStream;\n/**\n * Stream command for YouTube\n * @param url YouTube URL\n * @param options lets you add quality for stream\n * @returns Stream class with type and stream for playing.\n */\nexport async function stream(url: string, options: StreamOptions = {}): Promise<YouTubeStream> {\n    const info = await video_stream_info(url, { htmldata: options.htmldata, language: options.language });\n    return await stream_from_info(info, options);\n}\n/**\n * Stream command for YouTube using info from video_info or decipher_info function.\n * @param info video_info data\n * @param options lets you add quality for stream\n * @returns Stream class with type and stream for playing.\n */\nexport async function stream_from_info(\n    info: InfoData | StreamInfoData,\n    options: StreamOptions = {}\n): Promise<YouTubeStream> {\n    if (info.format.length === 0)\n        throw new Error('Upcoming and premiere videos that are not currently live cannot be streamed.');\n    if (options.quality && !Number.isInteger(options.quality))\n        throw new Error(\"Quality must be set to an integer.\")\n\n    const final: any[] = [];\n    if (\n        info.LiveStreamData.isLive === true &&\n        info.LiveStreamData.dashManifestUrl !== null &&\n        info.video_details.durationInSec === 0\n    ) {\n        return new LiveStream(\n            info.LiveStreamData.dashManifestUrl,\n            info.format[info.format.length - 1].targetDurationSec as number,\n            info.video_details.url,\n            options.precache\n        );\n    }\n\n    const audioFormat = parseAudioFormats(info.format);\n    if (typeof options.quality !== 'number') options.quality = audioFormat.length - 1;\n    else if (options.quality <= 0) options.quality = 0;\n    else if (options.quality >= audioFormat.length) options.quality = audioFormat.length - 1;\n    if (audioFormat.length !== 0) final.push(audioFormat[options.quality]);\n    else final.push(info.format[info.format.length - 1]);\n    let type: StreamType =\n        final[0].codec === 'opus' && final[0].container === 'webm' ? StreamType.WebmOpus : StreamType.Arbitrary;\n    await request_stream(`https://${new URL(final[0].url).host}/generate_204`);\n    if (type === StreamType.WebmOpus) {\n        if (!options.discordPlayerCompatibility) {\n            options.seek ??= 0;\n            if (options.seek >= info.video_details.durationInSec || options.seek < 0)\n                throw new Error(`Seeking beyond limit. [ 0 - ${info.video_details.durationInSec - 1}]`);\n            return new SeekStream(\n                final[0].url,\n                info.video_details.durationInSec,\n                final[0].indexRange.end,\n                Number(final[0].contentLength),\n                Number(final[0].bitrate),\n                info.video_details.url,\n                options\n            );\n        } else if (options.seek) throw new Error('Can not seek with discordPlayerCompatibility set to true.');\n    }\n\n    let contentLength;\n    if (final[0].contentLength) {\n        contentLength = Number(final[0].contentLength);\n    } else {\n        contentLength = await request_content_length(final[0].url);\n    }\n\n    return new Stream(\n        final[0].url,\n        type,\n        info.video_details.durationInSec,\n        contentLength,\n        info.video_details.url,\n        options\n    );\n}\n"]}