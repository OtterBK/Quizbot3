{"version":3,"file":"classes.js","sourceRoot":"","sources":["../../play-dl/Deezer/classes.ts"],"names":[],"mappings":"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","sourcesContent":["import { request } from '../Request';\n\n/**\n * Interface representing an image on Deezer\n * available in four sizes\n */\ninterface DeezerImage {\n    /**\n     * The largest version of the image\n     */\n    xl: string;\n    /**\n     * The second largest version of the image\n     */\n    big: string;\n    /**\n     * The second smallest version of the image\n     */\n    medium: string;\n    /**\n     * The smallest version of the image\n     */\n    small: string;\n}\n\n/**\n * Interface representing a Deezer genre\n */\ninterface DeezerGenre {\n    /**\n     * The name of the genre\n     */\n    name: string;\n    /**\n     * The thumbnail of the genre available in four sizes\n     */\n    picture: DeezerImage;\n}\n\n/**\n * Interface representing a Deezer user account\n */\ninterface DeezerUser {\n    /**\n     * The id of the user\n     */\n    id: number;\n    /**\n     * The name of the user\n     */\n    name: string;\n}\n\n/**\n * Class representing a Deezer track\n */\nexport class DeezerTrack {\n    /**\n     * The id of the track\n     */\n    id: number;\n    /**\n     * The title of the track\n     */\n    title: string;\n    /**\n     * A shorter version of the title\n     */\n    shortTitle: string;\n    /**\n     * The URL of the track on Deezer\n     */\n    url: string;\n    /**\n     * The duration of the track in seconds\n     */\n    durationInSec: number;\n    /**\n     * The rank of the track\n     */\n    rank: number;\n    /**\n     * `true` if the track contains any explicit lyrics\n     */\n    explicit: boolean;\n    /**\n     * URL to a file containing the first 30 seconds of the track\n     */\n    previewURL: string;\n    /**\n     * The artist of the track\n     */\n    artist: DeezerArtist;\n    /**\n     * The album that this track is in\n     */\n    album: DeezerTrackAlbum;\n    /**\n     * The type, always `'track'`, useful to determine what the deezer function returned\n     */\n    type: 'track' | 'playlist' | 'album';\n\n    /**\n     * Signifies that some properties are not populated\n     *\n     * Partial tracks can be populated by calling {@link DeezerTrack.fetch}.\n     *\n     * `true` for tracks in search results and `false` if the track was fetched directly or expanded.\n     */\n    partial: boolean;\n\n    /**\n     * The position of the track in the album\n     *\n     * `undefined` for partial tracks\n     *\n     * @see {@link DeezerTrack.partial}\n     */\n    trackPosition?: number;\n    /**\n     * The number of the disk the track is on\n     *\n     * `undefined` for partial tracks\n     *\n     * @see {@link DeezerTrack.partial}\n     */\n    diskNumber?: number;\n    /**\n     * The release date\n     *\n     * `undefined` for partial tracks\n     *\n     * @see {@link DeezerTrack.partial}\n     */\n    releaseDate?: Date;\n    /**\n     * The number of beats per minute\n     *\n     * `undefined` for partial tracks\n     *\n     * @see {@link DeezerTrack.partial}\n     */\n    bpm?: number;\n    /**\n     * The gain of the track\n     *\n     * `undefined` for partial tracks\n     *\n     * @see {@link DeezerTrack.partial}\n     */\n    gain?: number;\n    /**\n     * The artists that have contributed to the track\n     *\n     * `undefined` for partial tracks\n     *\n     * @see {@link DeezerTrack.partial}\n     */\n    contributors?: DeezerArtist[];\n\n    /**\n     * Creates a Deezer track from the data in an API response\n     * @param data the data to use to create the track\n     * @param partial Whether the track should be partial\n     * @see {@link DeezerTrack.partial}\n     */\n    constructor(data: any, partial: boolean) {\n        this.id = data.id;\n        this.title = data.title;\n        this.shortTitle = data.title_short;\n        this.url = data.link;\n        this.durationInSec = data.duration;\n        this.rank = data.rank;\n        this.explicit = data.explicit_lyrics;\n        this.previewURL = data.preview;\n        this.artist = new DeezerArtist(data.artist);\n        this.album = new DeezerTrackAlbum(data.album);\n        this.type = 'track';\n\n        this.partial = partial;\n\n        if (!partial) {\n            this.trackPosition = data.track_position;\n            this.diskNumber = data.disk_number;\n            this.releaseDate = new Date(data.release_date);\n            this.bpm = data.bpm;\n            this.gain = data.gain;\n            this.contributors = [];\n\n            data.contributors.forEach((contributor: any) => {\n                this.contributors?.push(new DeezerArtist(contributor));\n            });\n        }\n    }\n\n    /**\n     * Fetches and populates the missing fields\n     *\n     * The property {@link partial} will be `false` if this method finishes successfully.\n     *\n     * @returns A promise with the same track this method was called on.\n     */\n    async fetch(): Promise<DeezerTrack> {\n        if (!this.partial) return this;\n\n        const response = await request(`https://api.deezer.com/track/${this.id}/`).catch((err: Error) => err);\n\n        if (response instanceof Error) throw response;\n        const jsonData = JSON.parse(response);\n\n        this.partial = false;\n\n        this.trackPosition = jsonData.track_position;\n        this.diskNumber = jsonData.disk_number;\n        this.releaseDate = new Date(jsonData.release_date);\n        this.bpm = jsonData.bpm;\n        this.gain = jsonData.gain;\n        this.contributors = [];\n\n        jsonData.contributors.forEach((contributor: any) => {\n            this.contributors?.push(new DeezerArtist(contributor));\n        });\n\n        return this;\n    }\n    /**\n     * Converts instances of this class to JSON data\n     * @returns JSON data.\n     */\n    toJSON() {\n        return {\n            id: this.id,\n            title: this.title,\n            shortTitle: this.shortTitle,\n            url: this.url,\n            durationInSec: this.durationInSec,\n            rank: this.rank,\n            explicit: this.explicit,\n            previewURL: this.previewURL,\n            artist: this.artist,\n            album: this.album,\n            type: this.type,\n            trackPosition: this.trackPosition,\n            diskNumber: this.diskNumber,\n            releaseDate: this.releaseDate,\n            bpm: this.bpm,\n            gain: this.gain,\n            contributors: this.contributors\n        };\n    }\n}\n/**\n * Class for Deezer Albums\n */\nexport class DeezerAlbum {\n    /**\n     * The id of the album\n     */\n    id: number;\n    /**\n     * The title of the album\n     */\n    title: string;\n    /**\n     * The URL to the album on Deezer\n     */\n    url: string;\n    /**\n     * The record type of the album (e.g. EP, ALBUM, etc ...)\n     */\n    recordType: string;\n    /**\n     * `true` if the album contains any explicit lyrics\n     */\n    explicit: boolean;\n    /**\n     * The artist of the album\n     */\n    artist: DeezerArtist;\n    /**\n     * The album cover available in four sizes\n     */\n    cover: DeezerImage;\n    /**\n     * The type, always `'album'`, useful to determine what the deezer function returned\n     */\n    type: 'track' | 'playlist' | 'album';\n    /**\n     * The number of tracks in the album\n     */\n    tracksCount: number;\n\n    /**\n     * Signifies that some properties are not populated\n     *\n     * Partial albums can be populated by calling {@link DeezerAlbum.fetch}.\n     *\n     * `true` for albums in search results and `false` if the album was fetched directly or expanded.\n     */\n    partial: boolean;\n\n    /**\n     * The **u**niversal **p**roduct **c**ode of the album\n     *\n     * `undefined` for partial albums\n     *\n     * @see {@link DeezerAlbum.partial}\n     */\n    upc?: string;\n    /**\n     * The duration of the album in seconds\n     *\n     * `undefined` for partial albums\n     *\n     * @see {@link DeezerAlbum.partial}\n     */\n    durationInSec?: number;\n    /**\n     * The number of fans the album has\n     *\n     * `undefined` for partial albums\n     *\n     * @see {@link DeezerAlbum.partial}\n     */\n    numberOfFans?: number;\n    /**\n     * The release date of the album\n     *\n     * `undefined` for partial albums\n     *\n     * @see {@link DeezerAlbum.partial}\n     */\n    releaseDate?: Date;\n    /**\n     * Whether the album is available\n     *\n     * `undefined` for partial albums\n     *\n     * @see {@link DeezerAlbum.partial}\n     */\n    available?: boolean;\n    /**\n     * The list of genres present in this album\n     *\n     * `undefined` for partial albums\n     *\n     * @see {@link DeezerAlbum.partial}\n     */\n    genres?: DeezerGenre[];\n    /**\n     * The contributors to the album\n     *\n     * `undefined` for partial albums\n     *\n     * @see {@link DeezerAlbum.partial}\n     */\n    contributors?: DeezerArtist[];\n\n    /**\n     * The list of tracks in the album\n     *\n     * empty (length === 0) for partial albums\n     *\n     * Use {@link DeezerAlbum.fetch} to populate the tracks and other properties\n     *\n     * @see {@link DeezerAlbum.partial}\n     */\n    tracks: DeezerTrack[];\n\n    /**\n     * Creates a Deezer album from the data in an API response\n     * @param data the data to use to create the album\n     * @param partial Whether the album should be partial\n     * @see {@link DeezerAlbum.partial}\n     */\n    constructor(data: any, partial: boolean) {\n        this.id = data.id;\n        this.title = data.title;\n        this.url = data.link;\n        this.recordType = data.record_type;\n        this.explicit = data.explicit_lyrics;\n        this.artist = new DeezerArtist(data.artist);\n        this.type = 'album';\n        this.tracksCount = data.nb_tracks;\n        this.contributors = [];\n        this.genres = [];\n        this.tracks = [];\n        this.cover = {\n            xl: data.cover_xl,\n            big: data.cover_big,\n            medium: data.cover_medium,\n            small: data.cover_small\n        };\n\n        this.partial = partial;\n\n        if (!partial) {\n            this.upc = data.upc;\n            this.durationInSec = data.duration;\n            this.numberOfFans = data.fans;\n            this.releaseDate = new Date(data.release_date);\n            this.available = data.available;\n\n            data.contributors.forEach((contributor: any) => {\n                this.contributors?.push(new DeezerArtist(contributor));\n            });\n\n            data.genres.data.forEach((genre: any) => {\n                this.genres?.push({\n                    name: genre.name,\n                    picture: {\n                        xl: `${genre.picture}?size=xl`,\n                        big: `${genre.picture}?size=big`,\n                        medium: `${genre.picture}?size=medium`,\n                        small: `${genre.picture}?size=small`\n                    }\n                });\n            });\n\n            const trackAlbum: any = {\n                id: this.id,\n                title: this.title,\n                cover_xl: this.cover.xl,\n                cover_big: this.cover.big,\n                cover_medium: this.cover.medium,\n                cover_small: this.cover.small,\n                release_date: data.release_date\n            };\n            data.tracks.data.forEach((track: any) => {\n                track.album = trackAlbum;\n                this.tracks.push(new DeezerTrack(track, true));\n            });\n        }\n    }\n\n    /**\n     * Fetches and populates the missing fields including all tracks.\n     *\n     * The property {@link DeezerAlbum.partial} will be `false` if this method finishes successfully.\n     *\n     * @returns A promise with the same album this method was called on.\n     */\n    async fetch(): Promise<DeezerAlbum> {\n        if (!this.partial) return this;\n\n        const response = await request(`https://api.deezer.com/album/${this.id}/`).catch((err: Error) => err);\n\n        if (response instanceof Error) throw response;\n        const jsonData = JSON.parse(response);\n\n        this.partial = false;\n\n        this.upc = jsonData.upc;\n        this.durationInSec = jsonData.duration;\n        this.numberOfFans = jsonData.fans;\n        this.releaseDate = new Date(jsonData.release_date);\n        this.available = jsonData.available;\n        this.contributors = [];\n        this.genres = [];\n        this.tracks = [];\n\n        jsonData.contributors.forEach((contributor: any) => {\n            this.contributors?.push(new DeezerArtist(contributor));\n        });\n\n        jsonData.genres.data.forEach((genre: any) => {\n            this.genres?.push({\n                name: genre.name,\n                picture: {\n                    xl: `${genre.picture}?size=xl`,\n                    big: `${genre.picture}?size=big`,\n                    medium: `${genre.picture}?size=medium`,\n                    small: `${genre.picture}?size=small`\n                }\n            });\n        });\n\n        const trackAlbum: any = {\n            id: this.id,\n            title: this.title,\n            cover_xl: this.cover.xl,\n            cover_big: this.cover.big,\n            cover_medium: this.cover.medium,\n            cover_small: this.cover.small,\n            release_date: jsonData.release_date\n        };\n        jsonData.tracks.data.forEach((track: any) => {\n            track.album = trackAlbum;\n            this.tracks.push(new DeezerTrack(track, true));\n        });\n\n        return this;\n    }\n    /**\n     * Fetches all the tracks in the album and returns them\n     *\n     * ```ts\n     * const album = await play.deezer('album url')\n     *\n     * const tracks = await album.all_tracks()\n     * ```\n     * @returns An array of {@link DeezerTrack}\n     */\n    async all_tracks(): Promise<DeezerTrack[]> {\n        await this.fetch();\n\n        return this.tracks as DeezerTrack[];\n    }\n    /**\n     * Converts instances of this class to JSON data\n     * @returns JSON data.\n     */\n    toJSON() {\n        return {\n            id: this.id,\n            title: this.title,\n            url: this.url,\n            recordType: this.recordType,\n            explicit: this.explicit,\n            artist: this.artist,\n            cover: this.cover,\n            type: this.type,\n            upc: this.upc,\n            tracksCount: this.tracksCount,\n            durationInSec: this.durationInSec,\n            numberOfFans: this.numberOfFans,\n            releaseDate: this.releaseDate,\n            available: this.available,\n            genres: this.genres,\n            contributors: this.contributors,\n            tracks: this.tracks.map((track) => track.toJSON())\n        };\n    }\n}\n/**\n * Class for Deezer Playlists\n */\nexport class DeezerPlaylist {\n    /**\n     * The id of the playlist\n     */\n    id: number;\n    /**\n     * The title of the playlist\n     */\n    title: string;\n    /**\n     * Whether the playlist is public or private\n     */\n    public: boolean;\n    /**\n     * The URL of the playlist on Deezer\n     */\n    url: string;\n    /**\n     * Cover picture of the playlist available in four sizes\n     */\n    picture: DeezerImage;\n    /**\n     * The date of the playlist's creation\n     */\n    creationDate: Date;\n    /**\n     * The type, always `'playlist'`, useful to determine what the deezer function returned\n     */\n    type: 'track' | 'playlist' | 'album';\n    /**\n     * The Deezer user that created the playlist\n     */\n    creator: DeezerUser;\n    /**\n     * The number of tracks in the playlist\n     */\n    tracksCount: number;\n\n    /**\n     * Signifies that some properties are not populated\n     *\n     * Partial playlists can be populated by calling {@link DeezerPlaylist.fetch}.\n     *\n     * `true` for playlists in search results and `false` if the album was fetched directly or expanded.\n     */\n    partial: boolean;\n\n    /**\n     * Description of the playlist\n     *\n     * `undefined` for partial playlists\n     *\n     * @see {@link DeezerPlaylist.partial}\n     */\n    description?: string;\n    /**\n     * Duration of the playlist in seconds\n     *\n     * `undefined` for partial playlists\n     *\n     * @see {@link DeezerPlaylist.partial}\n     */\n    durationInSec?: number;\n    /**\n     * `true` if the playlist is the loved tracks playlist\n     *\n     * `undefined` for partial playlists\n     *\n     * @see {@link DeezerPlaylist.partial}\n     */\n    isLoved?: boolean;\n    /**\n     * Whether multiple users have worked on the playlist\n     *\n     * `undefined` for partial playlists\n     *\n     * @see {@link DeezerPlaylist.partial}\n     */\n    collaborative?: boolean;\n    /**\n     * The number of fans the playlist has\n     *\n     * `undefined` for partial playlists\n     *\n     * @see {@link DeezerPlaylist.partial}\n     */\n    fans?: number;\n\n    /**\n     * The list of tracks in the playlist\n     *\n     * empty (length === 0) for partial and non public playlists\n     *\n     * Use {@link DeezerPlaylist.fetch} to populate the tracks and other properties\n     *\n     * @see {@link DeezerPlaylist.partial}\n     * @see {@link DeezerPlaylist.public}\n     */\n    tracks: DeezerTrack[];\n\n    /**\n     * Creates a Deezer playlist from the data in an API response\n     * @param data the data to use to create the playlist\n     * @param partial Whether the playlist should be partial\n     * @see {@link DeezerPlaylist.partial}\n     */\n    constructor(data: any, partial: boolean) {\n        this.id = data.id;\n        this.title = data.title;\n        this.public = data.public;\n        this.url = data.link;\n        this.creationDate = new Date(data.creation_date);\n        this.type = 'playlist';\n        this.tracksCount = data.nb_tracks;\n        this.tracks = [];\n\n        this.picture = {\n            xl: data.picture_xl,\n            big: data.picture_big,\n            medium: data.picture_medium,\n            small: data.picture_small\n        };\n\n        if (data.user) {\n            this.creator = {\n                id: data.user.id,\n                name: data.user.name\n            };\n        } else {\n            this.creator = {\n                id: data.creator.id,\n                name: data.creator.name\n            };\n        }\n\n        this.partial = partial;\n\n        if (!partial) {\n            this.description = data.description;\n            this.durationInSec = data.duration;\n            this.isLoved = data.is_loved_track;\n            this.collaborative = data.collaborative;\n            this.fans = data.fans;\n\n            if (this.public) {\n                this.tracks = data.tracks.data.map((track: any) => {\n                    return new DeezerTrack(track, true);\n                });\n            }\n        }\n    }\n\n    /**\n     * Fetches and populates the missing fields, including all tracks.\n     *\n     * The property {@link DeezerPlaylist.partial} will be `false` if this method finishes successfully.\n     *\n     * @returns A promise with the same playlist this method was called on.\n     */\n    async fetch(): Promise<DeezerPlaylist> {\n        if (!this.partial && (this.tracks.length === this.tracksCount || !this.public)) {\n            return this;\n        }\n\n        if (this.partial) {\n            const response = await request(`https://api.deezer.com/playlist/${this.id}/`).catch((err: Error) => err);\n\n            if (response instanceof Error) throw response;\n            const jsonData = JSON.parse(response);\n\n            this.partial = false;\n\n            this.description = jsonData.description;\n            this.durationInSec = jsonData.duration;\n            this.isLoved = jsonData.is_loved_track;\n            this.collaborative = jsonData.collaborative;\n            this.fans = jsonData.fans;\n\n            if (this.public) {\n                this.tracks = jsonData.tracks.data.map((track: any) => {\n                    return new DeezerTrack(track, true);\n                });\n            }\n        }\n\n        const currentTracksCount = this.tracks.length;\n        if (this.public && currentTracksCount !== this.tracksCount) {\n            let missing = this.tracksCount - currentTracksCount;\n\n            if (missing > 1000) missing = 1000;\n\n            const promises: Promise<DeezerTrack[]>[] = [];\n            for (let i = 1; i <= Math.ceil(missing / 100); i++) {\n                promises.push(\n                    new Promise(async (resolve, reject) => {\n                        const response = await request(\n                            `https://api.deezer.com/playlist/${this.id}/tracks?limit=100&index=${i * 100}`\n                        ).catch((err) => reject(err));\n\n                        if (typeof response !== 'string') return;\n                        const jsonData = JSON.parse(response);\n                        const tracks = jsonData.data.map((track: any) => {\n                            return new DeezerTrack(track, true);\n                        });\n\n                        resolve(tracks);\n                    })\n                );\n            }\n\n            const results = await Promise.allSettled(promises);\n            const newTracks: DeezerTrack[] = [];\n\n            for (const result of results) {\n                if (result.status === 'fulfilled') {\n                    newTracks.push(...result.value);\n                } else {\n                    throw result.reason;\n                }\n            }\n\n            this.tracks.push(...newTracks);\n        }\n\n        return this;\n    }\n    /**\n     * Fetches all the tracks in the playlist and returns them\n     *\n     * ```ts\n     * const playlist = await play.deezer('playlist url')\n     *\n     * const tracks = await playlist.all_tracks()\n     * ```\n     * @returns An array of {@link DeezerTrack}\n     */\n    async all_tracks(): Promise<DeezerTrack[]> {\n        await this.fetch();\n\n        return this.tracks as DeezerTrack[];\n    }\n    /**\n     * Converts instances of this class to JSON data\n     * @returns JSON data.\n     */\n    toJSON() {\n        return {\n            id: this.id,\n            title: this.title,\n            public: this.public,\n            url: this.url,\n            picture: this.picture,\n            creationDate: this.creationDate,\n            type: this.type,\n            creator: this.creator,\n            tracksCount: this.tracksCount,\n            description: this.description,\n            durationInSec: this.durationInSec,\n            isLoved: this.isLoved,\n            collaborative: this.collaborative,\n            fans: this.fans,\n            tracks: this.tracks.map((track) => track.toJSON())\n        };\n    }\n}\n\nclass DeezerTrackAlbum {\n    id: number;\n    title: string;\n    url: string;\n    cover: DeezerImage;\n    releaseDate?: Date;\n\n    constructor(data: any) {\n        this.id = data.id;\n        this.title = data.title;\n        this.url = `https://www.deezer.com/album/${data.id}/`;\n        this.cover = {\n            xl: data.cover_xl,\n            big: data.cover_big,\n            medium: data.cover_medium,\n            small: data.cover_small\n        };\n\n        if (data.release_date) this.releaseDate = new Date(data.release_date);\n    }\n}\n/**\n * Class representing a Deezer artist\n */\nclass DeezerArtist {\n    /**\n     * The id of the artist\n     */\n    id: number;\n    /**\n     * The name of the artist\n     */\n    name: string;\n    /**\n     * The URL of the artist on Deezer\n     */\n    url: string;\n\n    /**\n     * The picture of the artist available in four sizes\n     */\n    picture?: DeezerImage;\n    /**\n     * The of the artist on the track\n     */\n    role?: string;\n\n    constructor(data: any) {\n        this.id = data.id;\n        this.name = data.name;\n\n        this.url = data.link ? data.link : `https://www.deezer.com/artist/${data.id}/`;\n\n        if (data.picture_xl)\n            this.picture = {\n                xl: data.picture_xl,\n                big: data.picture_big,\n                medium: data.picture_medium,\n                small: data.picture_small\n            };\n\n        if (data.role) this.role = data.role;\n    }\n}\n"]}